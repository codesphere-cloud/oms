// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package installer

import (
	"github.com/codesphere-cloud/oms/internal/installer/files"
	"github.com/codesphere-cloud/oms/internal/util"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigManager creates a new instance of MockConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigManager {
	mock := &MockConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigManager is an autogenerated mock type for the ConfigManager type
type MockConfigManager struct {
	mock.Mock
}

type MockConfigManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigManager) EXPECT() *MockConfigManager_Expecter {
	return &MockConfigManager_Expecter{mock: &_m.Mock}
}

// ExtractOciImageIndex provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager) ExtractOciImageIndex(imagefile string) (files.OCIImageIndex, error) {
	ret := _mock.Called(imagefile)

	if len(ret) == 0 {
		panic("no return value specified for ExtractOciImageIndex")
	}

	var r0 files.OCIImageIndex
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (files.OCIImageIndex, error)); ok {
		return returnFunc(imagefile)
	}
	if returnFunc, ok := ret.Get(0).(func(string) files.OCIImageIndex); ok {
		r0 = returnFunc(imagefile)
	} else {
		r0 = ret.Get(0).(files.OCIImageIndex)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(imagefile)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigManager_ExtractOciImageIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractOciImageIndex'
type MockConfigManager_ExtractOciImageIndex_Call struct {
	*mock.Call
}

// ExtractOciImageIndex is a helper method to define mock.On call
//   - imagefile
func (_e *MockConfigManager_Expecter) ExtractOciImageIndex(imagefile interface{}) *MockConfigManager_ExtractOciImageIndex_Call {
	return &MockConfigManager_ExtractOciImageIndex_Call{Call: _e.mock.On("ExtractOciImageIndex", imagefile)}
}

func (_c *MockConfigManager_ExtractOciImageIndex_Call) Run(run func(imagefile string)) *MockConfigManager_ExtractOciImageIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigManager_ExtractOciImageIndex_Call) Return(oCIImageIndex files.OCIImageIndex, err error) *MockConfigManager_ExtractOciImageIndex_Call {
	_c.Call.Return(oCIImageIndex, err)
	return _c
}

func (_c *MockConfigManager_ExtractOciImageIndex_Call) RunAndReturn(run func(imagefile string) (files.OCIImageIndex, error)) *MockConfigManager_ExtractOciImageIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ParseConfigYaml provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager) ParseConfigYaml(configPath string) (files.RootConfig, error) {
	ret := _mock.Called(configPath)

	if len(ret) == 0 {
		panic("no return value specified for ParseConfigYaml")
	}

	var r0 files.RootConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (files.RootConfig, error)); ok {
		return returnFunc(configPath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) files.RootConfig); ok {
		r0 = returnFunc(configPath)
	} else {
		r0 = ret.Get(0).(files.RootConfig)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(configPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigManager_ParseConfigYaml_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseConfigYaml'
type MockConfigManager_ParseConfigYaml_Call struct {
	*mock.Call
}

// ParseConfigYaml is a helper method to define mock.On call
//   - configPath
func (_e *MockConfigManager_Expecter) ParseConfigYaml(configPath interface{}) *MockConfigManager_ParseConfigYaml_Call {
	return &MockConfigManager_ParseConfigYaml_Call{Call: _e.mock.On("ParseConfigYaml", configPath)}
}

func (_c *MockConfigManager_ParseConfigYaml_Call) Run(run func(configPath string)) *MockConfigManager_ParseConfigYaml_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigManager_ParseConfigYaml_Call) Return(rootConfig files.RootConfig, err error) *MockConfigManager_ParseConfigYaml_Call {
	_c.Call.Return(rootConfig, err)
	return _c
}

func (_c *MockConfigManager_ParseConfigYaml_Call) RunAndReturn(run func(configPath string) (files.RootConfig, error)) *MockConfigManager_ParseConfigYaml_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackageManager creates a new instance of MockPackageManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageManager {
	mock := &MockPackageManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPackageManager is an autogenerated mock type for the PackageManager type
type MockPackageManager struct {
	mock.Mock
}

type MockPackageManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageManager) EXPECT() *MockPackageManager_Expecter {
	return &MockPackageManager_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function for the type MockPackageManager
func (_mock *MockPackageManager) Extract(force bool) error {
	ret := _mock.Called(force)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bool) error); ok {
		r0 = returnFunc(force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackageManager_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type MockPackageManager_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - force
func (_e *MockPackageManager_Expecter) Extract(force interface{}) *MockPackageManager_Extract_Call {
	return &MockPackageManager_Extract_Call{Call: _e.mock.On("Extract", force)}
}

func (_c *MockPackageManager_Extract_Call) Run(run func(force bool)) *MockPackageManager_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockPackageManager_Extract_Call) Return(err error) *MockPackageManager_Extract_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackageManager_Extract_Call) RunAndReturn(run func(force bool) error) *MockPackageManager_Extract_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractDependency provides a mock function for the type MockPackageManager
func (_mock *MockPackageManager) ExtractDependency(file string, force bool) error {
	ret := _mock.Called(file, force)

	if len(ret) == 0 {
		panic("no return value specified for ExtractDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = returnFunc(file, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackageManager_ExtractDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractDependency'
type MockPackageManager_ExtractDependency_Call struct {
	*mock.Call
}

// ExtractDependency is a helper method to define mock.On call
//   - file
//   - force
func (_e *MockPackageManager_Expecter) ExtractDependency(file interface{}, force interface{}) *MockPackageManager_ExtractDependency_Call {
	return &MockPackageManager_ExtractDependency_Call{Call: _e.mock.On("ExtractDependency", file, force)}
}

func (_c *MockPackageManager_ExtractDependency_Call) Run(run func(file string, force bool)) *MockPackageManager_ExtractDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockPackageManager_ExtractDependency_Call) Return(err error) *MockPackageManager_ExtractDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackageManager_ExtractDependency_Call) RunAndReturn(run func(file string, force bool) error) *MockPackageManager_ExtractDependency_Call {
	_c.Call.Return(run)
	return _c
}

// FileIO provides a mock function for the type MockPackageManager
func (_mock *MockPackageManager) FileIO() util.FileIO {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileIO")
	}

	var r0 util.FileIO
	if returnFunc, ok := ret.Get(0).(func() util.FileIO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.FileIO)
		}
	}
	return r0
}

// MockPackageManager_FileIO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileIO'
type MockPackageManager_FileIO_Call struct {
	*mock.Call
}

// FileIO is a helper method to define mock.On call
func (_e *MockPackageManager_Expecter) FileIO() *MockPackageManager_FileIO_Call {
	return &MockPackageManager_FileIO_Call{Call: _e.mock.On("FileIO")}
}

func (_c *MockPackageManager_FileIO_Call) Run(run func()) *MockPackageManager_FileIO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageManager_FileIO_Call) Return(fileIO util.FileIO) *MockPackageManager_FileIO_Call {
	_c.Call.Return(fileIO)
	return _c
}

func (_c *MockPackageManager_FileIO_Call) RunAndReturn(run func() util.FileIO) *MockPackageManager_FileIO_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyPath provides a mock function for the type MockPackageManager
func (_mock *MockPackageManager) GetDependencyPath(filename string) string {
	ret := _mock.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(filename)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPackageManager_GetDependencyPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyPath'
type MockPackageManager_GetDependencyPath_Call struct {
	*mock.Call
}

// GetDependencyPath is a helper method to define mock.On call
//   - filename
func (_e *MockPackageManager_Expecter) GetDependencyPath(filename interface{}) *MockPackageManager_GetDependencyPath_Call {
	return &MockPackageManager_GetDependencyPath_Call{Call: _e.mock.On("GetDependencyPath", filename)}
}

func (_c *MockPackageManager_GetDependencyPath_Call) Run(run func(filename string)) *MockPackageManager_GetDependencyPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPackageManager_GetDependencyPath_Call) Return(s string) *MockPackageManager_GetDependencyPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPackageManager_GetDependencyPath_Call) RunAndReturn(run func(filename string) string) *MockPackageManager_GetDependencyPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkDir provides a mock function for the type MockPackageManager
func (_mock *MockPackageManager) GetWorkDir() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkDir")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPackageManager_GetWorkDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkDir'
type MockPackageManager_GetWorkDir_Call struct {
	*mock.Call
}

// GetWorkDir is a helper method to define mock.On call
func (_e *MockPackageManager_Expecter) GetWorkDir() *MockPackageManager_GetWorkDir_Call {
	return &MockPackageManager_GetWorkDir_Call{Call: _e.mock.On("GetWorkDir")}
}

func (_c *MockPackageManager_GetWorkDir_Call) Run(run func()) *MockPackageManager_GetWorkDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageManager_GetWorkDir_Call) Return(s string) *MockPackageManager_GetWorkDir_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPackageManager_GetWorkDir_Call) RunAndReturn(run func() string) *MockPackageManager_GetWorkDir_Call {
	_c.Call.Return(run)
	return _c
}
