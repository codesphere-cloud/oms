// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package system

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockImageManager creates a new instance of MockImageManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageManager {
	mock := &MockImageManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageManager is an autogenerated mock type for the ImageManager type
type MockImageManager struct {
	mock.Mock
}

type MockImageManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageManager) EXPECT() *MockImageManager_Expecter {
	return &MockImageManager_Expecter{mock: &_m.Mock}
}

// BuildImage provides a mock function for the type MockImageManager
func (_mock *MockImageManager) BuildImage(dockerfile string, tag string, buildContext string) error {
	ret := _mock.Called(dockerfile, tag, buildContext)

	if len(ret) == 0 {
		panic("no return value specified for BuildImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(dockerfile, tag, buildContext)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageManager_BuildImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildImage'
type MockImageManager_BuildImage_Call struct {
	*mock.Call
}

// BuildImage is a helper method to define mock.On call
//   - dockerfile
//   - tag
//   - buildContext
func (_e *MockImageManager_Expecter) BuildImage(dockerfile interface{}, tag interface{}, buildContext interface{}) *MockImageManager_BuildImage_Call {
	return &MockImageManager_BuildImage_Call{Call: _e.mock.On("BuildImage", dockerfile, tag, buildContext)}
}

func (_c *MockImageManager_BuildImage_Call) Run(run func(dockerfile string, tag string, buildContext string)) *MockImageManager_BuildImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockImageManager_BuildImage_Call) Return(err error) *MockImageManager_BuildImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageManager_BuildImage_Call) RunAndReturn(run func(dockerfile string, tag string, buildContext string) error) *MockImageManager_BuildImage_Call {
	_c.Call.Return(run)
	return _c
}

// LoadImage provides a mock function for the type MockImageManager
func (_mock *MockImageManager) LoadImage(imageTarPath string) error {
	ret := _mock.Called(imageTarPath)

	if len(ret) == 0 {
		panic("no return value specified for LoadImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(imageTarPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageManager_LoadImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadImage'
type MockImageManager_LoadImage_Call struct {
	*mock.Call
}

// LoadImage is a helper method to define mock.On call
//   - imageTarPath
func (_e *MockImageManager_Expecter) LoadImage(imageTarPath interface{}) *MockImageManager_LoadImage_Call {
	return &MockImageManager_LoadImage_Call{Call: _e.mock.On("LoadImage", imageTarPath)}
}

func (_c *MockImageManager_LoadImage_Call) Run(run func(imageTarPath string)) *MockImageManager_LoadImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockImageManager_LoadImage_Call) Return(err error) *MockImageManager_LoadImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageManager_LoadImage_Call) RunAndReturn(run func(imageTarPath string) error) *MockImageManager_LoadImage_Call {
	_c.Call.Return(run)
	return _c
}

// PushImage provides a mock function for the type MockImageManager
func (_mock *MockImageManager) PushImage(tag string) error {
	ret := _mock.Called(tag)

	if len(ret) == 0 {
		panic("no return value specified for PushImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(tag)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageManager_PushImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushImage'
type MockImageManager_PushImage_Call struct {
	*mock.Call
}

// PushImage is a helper method to define mock.On call
//   - tag
func (_e *MockImageManager_Expecter) PushImage(tag interface{}) *MockImageManager_PushImage_Call {
	return &MockImageManager_PushImage_Call{Call: _e.mock.On("PushImage", tag)}
}

func (_c *MockImageManager_PushImage_Call) Run(run func(tag string)) *MockImageManager_PushImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockImageManager_PushImage_Call) Return(err error) *MockImageManager_PushImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageManager_PushImage_Call) RunAndReturn(run func(tag string) error) *MockImageManager_PushImage_Call {
	_c.Call.Return(run)
	return _c
}
