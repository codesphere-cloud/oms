// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package util

import (
	"github.com/jedib0t/go-pretty/v6/table"
	mock "github.com/stretchr/testify/mock"
	"os"
)

// NewMockFileWriter creates a new instance of MockFileWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileWriter {
	mock := &MockFileWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileWriter is an autogenerated mock type for the FileWriter type
type MockFileWriter struct {
	mock.Mock
}

type MockFileWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileWriter) EXPECT() *MockFileWriter_Expecter {
	return &MockFileWriter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFileWriter
func (_mock *MockFileWriter) Create(filename string) (*os.File, error) {
	ret := _mock.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(filename)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(filename)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileWriter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFileWriter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - filename
func (_e *MockFileWriter_Expecter) Create(filename interface{}) *MockFileWriter_Create_Call {
	return &MockFileWriter_Create_Call{Call: _e.mock.On("Create", filename)}
}

func (_c *MockFileWriter_Create_Call) Run(run func(filename string)) *MockFileWriter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileWriter_Create_Call) Return(file *os.File, err error) *MockFileWriter_Create_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFileWriter_Create_Call) RunAndReturn(run func(filename string) (*os.File, error)) *MockFileWriter_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTableWriter creates a new instance of MockTableWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTableWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTableWriter {
	mock := &MockTableWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTableWriter is an autogenerated mock type for the TableWriter type
type MockTableWriter struct {
	mock.Mock
}

type MockTableWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTableWriter) EXPECT() *MockTableWriter_Expecter {
	return &MockTableWriter_Expecter{mock: &_m.Mock}
}

// AppendHeader provides a mock function for the type MockTableWriter
func (_mock *MockTableWriter) AppendHeader(row table.Row, configs ...table.RowConfig) {
	if len(configs) > 0 {
		_mock.Called(row, configs)
	} else {
		_mock.Called(row)
	}

	return
}

// MockTableWriter_AppendHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendHeader'
type MockTableWriter_AppendHeader_Call struct {
	*mock.Call
}

// AppendHeader is a helper method to define mock.On call
//   - row
//   - configs
func (_e *MockTableWriter_Expecter) AppendHeader(row interface{}, configs ...interface{}) *MockTableWriter_AppendHeader_Call {
	return &MockTableWriter_AppendHeader_Call{Call: _e.mock.On("AppendHeader",
		append([]interface{}{row}, configs...)...)}
}

func (_c *MockTableWriter_AppendHeader_Call) Run(run func(row table.Row, configs ...table.RowConfig)) *MockTableWriter_AppendHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]table.RowConfig, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(table.RowConfig)
			}
		}
		run(args[0].(table.Row), variadicArgs...)
	})
	return _c
}

func (_c *MockTableWriter_AppendHeader_Call) Return() *MockTableWriter_AppendHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTableWriter_AppendHeader_Call) RunAndReturn(run func(row table.Row, configs ...table.RowConfig)) *MockTableWriter_AppendHeader_Call {
	_c.Run(run)
	return _c
}

// AppendRow provides a mock function for the type MockTableWriter
func (_mock *MockTableWriter) AppendRow(row table.Row, configs ...table.RowConfig) {
	if len(configs) > 0 {
		_mock.Called(row, configs)
	} else {
		_mock.Called(row)
	}

	return
}

// MockTableWriter_AppendRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendRow'
type MockTableWriter_AppendRow_Call struct {
	*mock.Call
}

// AppendRow is a helper method to define mock.On call
//   - row
//   - configs
func (_e *MockTableWriter_Expecter) AppendRow(row interface{}, configs ...interface{}) *MockTableWriter_AppendRow_Call {
	return &MockTableWriter_AppendRow_Call{Call: _e.mock.On("AppendRow",
		append([]interface{}{row}, configs...)...)}
}

func (_c *MockTableWriter_AppendRow_Call) Run(run func(row table.Row, configs ...table.RowConfig)) *MockTableWriter_AppendRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]table.RowConfig, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(table.RowConfig)
			}
		}
		run(args[0].(table.Row), variadicArgs...)
	})
	return _c
}

func (_c *MockTableWriter_AppendRow_Call) Return() *MockTableWriter_AppendRow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTableWriter_AppendRow_Call) RunAndReturn(run func(row table.Row, configs ...table.RowConfig)) *MockTableWriter_AppendRow_Call {
	_c.Run(run)
	return _c
}

// Render provides a mock function for the type MockTableWriter
func (_mock *MockTableWriter) Render() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTableWriter_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockTableWriter_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
func (_e *MockTableWriter_Expecter) Render() *MockTableWriter_Render_Call {
	return &MockTableWriter_Render_Call{Call: _e.mock.On("Render")}
}

func (_c *MockTableWriter_Render_Call) Run(run func()) *MockTableWriter_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTableWriter_Render_Call) Return(s string) *MockTableWriter_Render_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTableWriter_Render_Call) RunAndReturn(run func() string) *MockTableWriter_Render_Call {
	_c.Call.Return(run)
	return _c
}
