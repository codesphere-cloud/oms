// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package version

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockVersion creates a new instance of MockVersion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersion(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersion {
	mock := &MockVersion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersion is an autogenerated mock type for the Version type
type MockVersion struct {
	mock.Mock
}

type MockVersion_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersion) EXPECT() *MockVersion_Expecter {
	return &MockVersion_Expecter{mock: &_m.Mock}
}

// Arch provides a mock function for the type MockVersion
func (_mock *MockVersion) Arch() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Arch")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockVersion_Arch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Arch'
type MockVersion_Arch_Call struct {
	*mock.Call
}

// Arch is a helper method to define mock.On call
func (_e *MockVersion_Expecter) Arch() *MockVersion_Arch_Call {
	return &MockVersion_Arch_Call{Call: _e.mock.On("Arch")}
}

func (_c *MockVersion_Arch_Call) Run(run func()) *MockVersion_Arch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersion_Arch_Call) Return(s string) *MockVersion_Arch_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockVersion_Arch_Call) RunAndReturn(run func() string) *MockVersion_Arch_Call {
	_c.Call.Return(run)
	return _c
}

// BuildDate provides a mock function for the type MockVersion
func (_mock *MockVersion) BuildDate() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildDate")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockVersion_BuildDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDate'
type MockVersion_BuildDate_Call struct {
	*mock.Call
}

// BuildDate is a helper method to define mock.On call
func (_e *MockVersion_Expecter) BuildDate() *MockVersion_BuildDate_Call {
	return &MockVersion_BuildDate_Call{Call: _e.mock.On("BuildDate")}
}

func (_c *MockVersion_BuildDate_Call) Run(run func()) *MockVersion_BuildDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersion_BuildDate_Call) Return(s string) *MockVersion_BuildDate_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockVersion_BuildDate_Call) RunAndReturn(run func() string) *MockVersion_BuildDate_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockVersion
func (_mock *MockVersion) Commit() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockVersion_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockVersion_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockVersion_Expecter) Commit() *MockVersion_Commit_Call {
	return &MockVersion_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockVersion_Commit_Call) Run(run func()) *MockVersion_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersion_Commit_Call) Return(s string) *MockVersion_Commit_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockVersion_Commit_Call) RunAndReturn(run func() string) *MockVersion_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Os provides a mock function for the type MockVersion
func (_mock *MockVersion) Os() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Os")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockVersion_Os_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Os'
type MockVersion_Os_Call struct {
	*mock.Call
}

// Os is a helper method to define mock.On call
func (_e *MockVersion_Expecter) Os() *MockVersion_Os_Call {
	return &MockVersion_Os_Call{Call: _e.mock.On("Os")}
}

func (_c *MockVersion_Os_Call) Run(run func()) *MockVersion_Os_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersion_Os_Call) Return(s string) *MockVersion_Os_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockVersion_Os_Call) RunAndReturn(run func() string) *MockVersion_Os_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockVersion
func (_mock *MockVersion) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockVersion_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockVersion_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockVersion_Expecter) Version() *MockVersion_Version_Call {
	return &MockVersion_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockVersion_Version_Call) Run(run func()) *MockVersion_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersion_Version_Call) Return(s string) *MockVersion_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockVersion_Version_Call) RunAndReturn(run func() string) *MockVersion_Version_Call {
	_c.Call.Return(run)
	return _c
}
