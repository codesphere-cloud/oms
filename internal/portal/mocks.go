// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package portal

import (
	"io"
	"net/http"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPortal creates a new instance of MockPortal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPortal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPortal {
	mock := &MockPortal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPortal is an autogenerated mock type for the Portal type
type MockPortal struct {
	mock.Mock
}

type MockPortal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPortal) EXPECT() *MockPortal_Expecter {
	return &MockPortal_Expecter{mock: &_m.Mock}
}

// DownloadBuildArtifact provides a mock function for the type MockPortal
func (_mock *MockPortal) DownloadBuildArtifact(product Product, build Build, file io.Writer) error {
	ret := _mock.Called(product, build, file)

	if len(ret) == 0 {
		panic("no return value specified for DownloadBuildArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Product, Build, io.Writer) error); ok {
		r0 = returnFunc(product, build, file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPortal_DownloadBuildArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadBuildArtifact'
type MockPortal_DownloadBuildArtifact_Call struct {
	*mock.Call
}

// DownloadBuildArtifact is a helper method to define mock.On call
//   - product Product
//   - build Build
//   - file io.Writer
func (_e *MockPortal_Expecter) DownloadBuildArtifact(product interface{}, build interface{}, file interface{}) *MockPortal_DownloadBuildArtifact_Call {
	return &MockPortal_DownloadBuildArtifact_Call{Call: _e.mock.On("DownloadBuildArtifact", product, build, file)}
}

func (_c *MockPortal_DownloadBuildArtifact_Call) Run(run func(product Product, build Build, file io.Writer)) *MockPortal_DownloadBuildArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Product
		if args[0] != nil {
			arg0 = args[0].(Product)
		}
		var arg1 Build
		if args[1] != nil {
			arg1 = args[1].(Build)
		}
		var arg2 io.Writer
		if args[2] != nil {
			arg2 = args[2].(io.Writer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPortal_DownloadBuildArtifact_Call) Return(err error) *MockPortal_DownloadBuildArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPortal_DownloadBuildArtifact_Call) RunAndReturn(run func(product Product, build Build, file io.Writer) error) *MockPortal_DownloadBuildArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetBuild provides a mock function for the type MockPortal
func (_mock *MockPortal) GetBuild(product Product, version string, hash string) (Build, error) {
	ret := _mock.Called(product, version, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetBuild")
	}

	var r0 Build
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Product, string, string) (Build, error)); ok {
		return returnFunc(product, version, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(Product, string, string) Build); ok {
		r0 = returnFunc(product, version, hash)
	} else {
		r0 = ret.Get(0).(Build)
	}
	if returnFunc, ok := ret.Get(1).(func(Product, string, string) error); ok {
		r1 = returnFunc(product, version, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPortal_GetBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuild'
type MockPortal_GetBuild_Call struct {
	*mock.Call
}

// GetBuild is a helper method to define mock.On call
//   - product Product
//   - version string
//   - hash string
func (_e *MockPortal_Expecter) GetBuild(product interface{}, version interface{}, hash interface{}) *MockPortal_GetBuild_Call {
	return &MockPortal_GetBuild_Call{Call: _e.mock.On("GetBuild", product, version, hash)}
}

func (_c *MockPortal_GetBuild_Call) Run(run func(product Product, version string, hash string)) *MockPortal_GetBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Product
		if args[0] != nil {
			arg0 = args[0].(Product)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPortal_GetBuild_Call) Return(build Build, err error) *MockPortal_GetBuild_Call {
	_c.Call.Return(build, err)
	return _c
}

func (_c *MockPortal_GetBuild_Call) RunAndReturn(run func(product Product, version string, hash string) (Build, error)) *MockPortal_GetBuild_Call {
	_c.Call.Return(run)
	return _c
}

// ListBuilds provides a mock function for the type MockPortal
func (_mock *MockPortal) ListBuilds(product Product) (Builds, error) {
	ret := _mock.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for ListBuilds")
	}

	var r0 Builds
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Product) (Builds, error)); ok {
		return returnFunc(product)
	}
	if returnFunc, ok := ret.Get(0).(func(Product) Builds); ok {
		r0 = returnFunc(product)
	} else {
		r0 = ret.Get(0).(Builds)
	}
	if returnFunc, ok := ret.Get(1).(func(Product) error); ok {
		r1 = returnFunc(product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ListAPIKeys provides a mock function for the type MockPortal
func (_mock *MockPortal) ListAPIKeys() ([]ApiKey, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAPIKeys")
	}

	var r0 []ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]ApiKey, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []ApiKey); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).([]ApiKey)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPortal_ListAPIKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAPIKeys'
type MockPortal_ListAPIKeys_Call struct {
	*mock.Call
}

// ListAPIKeys is a helper method to define mock.On call
func (_e *MockPortal_Expecter) ListAPIKeys() *MockPortal_ListAPIKeys_Call {
	return &MockPortal_ListAPIKeys_Call{Call: _e.mock.On("ListAPIKeys")}
}

func (_c *MockPortal_ListAPIKeys_Call) Run(run func()) *MockPortal_ListAPIKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPortal_ListAPIKeys_Call) Return(keys []ApiKey, err error) *MockPortal_ListAPIKeys_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *MockPortal_ListAPIKeys_Call) RunAndReturn(run func() ([]ApiKey, error)) *MockPortal_ListAPIKeys_Call {
	_c.Call.Return(run)
	return _c
}

// MockPortal_ListBuilds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBuilds'
type MockPortal_ListBuilds_Call struct {
	*mock.Call
}

// ListBuilds is a helper method to define mock.On call
//   - product Product
func (_e *MockPortal_Expecter) ListBuilds(product interface{}) *MockPortal_ListBuilds_Call {
	return &MockPortal_ListBuilds_Call{Call: _e.mock.On("ListBuilds", product)}
}

func (_c *MockPortal_ListBuilds_Call) Run(run func(product Product)) *MockPortal_ListBuilds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Product
		if args[0] != nil {
			arg0 = args[0].(Product)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPortal_ListBuilds_Call) Return(availablePackages Builds, err error) *MockPortal_ListBuilds_Call {
	_c.Call.Return(availablePackages, err)
	return _c
}

func (_c *MockPortal_ListBuilds_Call) RunAndReturn(run func(product Product) (Builds, error)) *MockPortal_ListBuilds_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAPIKey provides a mock function for the type MockPortal
func (_mock *MockPortal) RegisterAPIKey(owner string, organization string, role string, expiresAt time.Time) error {
	ret := _mock.Called(owner, organization, role, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAPIKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, time.Time) error); ok {
		r0 = returnFunc(owner, organization, role, expiresAt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPortal_RegisterAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAPIKey'
type MockPortal_RegisterAPIKey_Call struct {
	*mock.Call
}

// RegisterAPIKey is a helper method to define mock.On call
//   - owner string
//   - organization string
//   - role string
//   - expiresAt time.Time
func (_e *MockPortal_Expecter) RegisterAPIKey(owner interface{}, organization interface{}, role interface{}, expiresAt interface{}) *MockPortal_RegisterAPIKey_Call {
	return &MockPortal_RegisterAPIKey_Call{Call: _e.mock.On("RegisterAPIKey", owner, organization, role, expiresAt)}
}

func (_c *MockPortal_RegisterAPIKey_Call) Run(run func(owner string, organization string, role string, expiresAt time.Time)) *MockPortal_RegisterAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPortal_RegisterAPIKey_Call) Return(err error) *MockPortal_RegisterAPIKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPortal_RegisterAPIKey_Call) RunAndReturn(run func(owner string, organization string, role string, expiresAt time.Time) error) *MockPortal_RegisterAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAPIKey provides a mock function for the type MockPortal
func (_mock *MockPortal) RevokeAPIKey(key string) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAPIKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPortal_RevokeAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAPIKey'
type MockPortal_RevokeAPIKey_Call struct {
	*mock.Call
}

// RevokeAPIKey is a helper method to define mock.On call
//   - key string
func (_e *MockPortal_Expecter) RevokeAPIKey(key interface{}) *MockPortal_RevokeAPIKey_Call {
	return &MockPortal_RevokeAPIKey_Call{Call: _e.mock.On("RevokeAPIKey", key)}
}

func (_c *MockPortal_RevokeAPIKey_Call) Run(run func(key string)) *MockPortal_RevokeAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPortal_RevokeAPIKey_Call) Return(err error) *MockPortal_RevokeAPIKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPortal_RevokeAPIKey_Call) RunAndReturn(run func(key string) error) *MockPortal_RevokeAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAPIKey provides a mock function for the type MockPortal
func (_mock *MockPortal) UpdateAPIKey(key string, expiresAt time.Time) error {
	ret := _mock.Called(key, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAPIKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = returnFunc(key, expiresAt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPortal_UpdateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAPIKey'
type MockPortal_UpdateAPIKey_Call struct {
	*mock.Call
}

// UpdateAPIKey is a helper method to define mock.On call
//   - key string
//   - expiresAt time.Time
func (_e *MockPortal_Expecter) UpdateAPIKey(key interface{}, expiresAt interface{}) *MockPortal_UpdateAPIKey_Call {
	return &MockPortal_UpdateAPIKey_Call{Call: _e.mock.On("UpdateAPIKey", key, expiresAt)}
}

func (_c *MockPortal_UpdateAPIKey_Call) Run(run func(key string, expiresAt time.Time)) *MockPortal_UpdateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPortal_UpdateAPIKey_Call) Return(err error) *MockPortal_UpdateAPIKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPortal_UpdateAPIKey_Call) RunAndReturn(run func(key string, expiresAt time.Time) error) *MockPortal_UpdateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHttpClient creates a new instance of MockHttpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpClient {
	mock := &MockHttpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHttpClient is an autogenerated mock type for the HttpClient type
type MockHttpClient struct {
	mock.Mock
}

type MockHttpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpClient) EXPECT() *MockHttpClient_Expecter {
	return &MockHttpClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockHttpClient
func (_mock *MockHttpClient) Do(request *http.Request) (*http.Response, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHttpClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockHttpClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - request *http.Request
func (_e *MockHttpClient_Expecter) Do(request interface{}) *MockHttpClient_Do_Call {
	return &MockHttpClient_Do_Call{Call: _e.mock.On("Do", request)}
}

func (_c *MockHttpClient_Do_Call) Run(run func(request *http.Request)) *MockHttpClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHttpClient_Do_Call) Return(response *http.Response, err error) *MockHttpClient_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHttpClient_Do_Call) RunAndReturn(run func(request *http.Request) (*http.Response, error)) *MockHttpClient_Do_Call {
	_c.Call.Return(run)
	return _c
}
