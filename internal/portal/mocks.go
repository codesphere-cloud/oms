// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package portal

import (
	mock "github.com/stretchr/testify/mock"
	"io"
	"net/http"
)

// NewMockPortal creates a new instance of MockPortal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPortal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPortal {
	mock := &MockPortal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPortal is an autogenerated mock type for the Portal type
type MockPortal struct {
	mock.Mock
}

type MockPortal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPortal) EXPECT() *MockPortal_Expecter {
	return &MockPortal_Expecter{mock: &_m.Mock}
}

// DownloadBuildArtifact provides a mock function for the type MockPortal
func (_mock *MockPortal) DownloadBuildArtifact(product Product, build Build, file io.Writer) error {
	ret := _mock.Called(product, build, file)

	if len(ret) == 0 {
		panic("no return value specified for DownloadBuildArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Product, Build, io.Writer) error); ok {
		r0 = returnFunc(product, build, file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPortal_DownloadBuildArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadBuildArtifact'
type MockPortal_DownloadBuildArtifact_Call struct {
	*mock.Call
}

// DownloadBuildArtifact is a helper method to define mock.On call
//   - product
//   - build
//   - file
func (_e *MockPortal_Expecter) DownloadBuildArtifact(product interface{}, build interface{}, file interface{}) *MockPortal_DownloadBuildArtifact_Call {
	return &MockPortal_DownloadBuildArtifact_Call{Call: _e.mock.On("DownloadBuildArtifact", product, build, file)}
}

func (_c *MockPortal_DownloadBuildArtifact_Call) Run(run func(product Product, build Build, file io.Writer)) *MockPortal_DownloadBuildArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Product), args[1].(Build), args[2].(io.Writer))
	})
	return _c
}

func (_c *MockPortal_DownloadBuildArtifact_Call) Return(err error) *MockPortal_DownloadBuildArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPortal_DownloadBuildArtifact_Call) RunAndReturn(run func(product Product, build Build, file io.Writer) error) *MockPortal_DownloadBuildArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBuild provides a mock function for the type MockPortal
func (_mock *MockPortal) GetLatestBuild(product Product) (Build, error) {
	ret := _mock.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBuild")
	}

	var r0 Build
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Product) (Build, error)); ok {
		return returnFunc(product)
	}
	if returnFunc, ok := ret.Get(0).(func(Product) Build); ok {
		r0 = returnFunc(product)
	} else {
		r0 = ret.Get(0).(Build)
	}
	if returnFunc, ok := ret.Get(1).(func(Product) error); ok {
		r1 = returnFunc(product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPortal_GetLatestBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBuild'
type MockPortal_GetLatestBuild_Call struct {
	*mock.Call
}

// GetLatestBuild is a helper method to define mock.On call
//   - product
func (_e *MockPortal_Expecter) GetLatestBuild(product interface{}) *MockPortal_GetLatestBuild_Call {
	return &MockPortal_GetLatestBuild_Call{Call: _e.mock.On("GetLatestBuild", product)}
}

func (_c *MockPortal_GetLatestBuild_Call) Run(run func(product Product)) *MockPortal_GetLatestBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Product))
	})
	return _c
}

func (_c *MockPortal_GetLatestBuild_Call) Return(build Build, err error) *MockPortal_GetLatestBuild_Call {
	_c.Call.Return(build, err)
	return _c
}

func (_c *MockPortal_GetLatestBuild_Call) RunAndReturn(run func(product Product) (Build, error)) *MockPortal_GetLatestBuild_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHttpClient creates a new instance of MockHttpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpClient {
	mock := &MockHttpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHttpClient is an autogenerated mock type for the HttpClient type
type MockHttpClient struct {
	mock.Mock
}

type MockHttpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpClient) EXPECT() *MockHttpClient_Expecter {
	return &MockHttpClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockHttpClient
func (_mock *MockHttpClient) Do(request *http.Request) (*http.Response, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHttpClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockHttpClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - request
func (_e *MockHttpClient_Expecter) Do(request interface{}) *MockHttpClient_Do_Call {
	return &MockHttpClient_Do_Call{Call: _e.mock.On("Do", request)}
}

func (_c *MockHttpClient_Do_Call) Run(run func(request *http.Request)) *MockHttpClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockHttpClient_Do_Call) Return(response *http.Response, err error) *MockHttpClient_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHttpClient_Do_Call) RunAndReturn(run func(request *http.Request) (*http.Response, error)) *MockHttpClient_Do_Call {
	_c.Call.Return(run)
	return _c
}
