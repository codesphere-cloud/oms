// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package env

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEnv creates a new instance of MockEnv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnv(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnv {
	mock := &MockEnv{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnv is an autogenerated mock type for the Env type
type MockEnv struct {
	mock.Mock
}

type MockEnv_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnv) EXPECT() *MockEnv_Expecter {
	return &MockEnv_Expecter{mock: &_m.Mock}
}

// GetOmsPortalApi provides a mock function for the type MockEnv
func (_mock *MockEnv) GetOmsPortalApi() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOmsPortalApi")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEnv_GetOmsPortalApi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOmsPortalApi'
type MockEnv_GetOmsPortalApi_Call struct {
	*mock.Call
}

// GetOmsPortalApi is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetOmsPortalApi() *MockEnv_GetOmsPortalApi_Call {
	return &MockEnv_GetOmsPortalApi_Call{Call: _e.mock.On("GetOmsPortalApi")}
}

func (_c *MockEnv_GetOmsPortalApi_Call) Run(run func()) *MockEnv_GetOmsPortalApi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetOmsPortalApi_Call) Return(s string) *MockEnv_GetOmsPortalApi_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEnv_GetOmsPortalApi_Call) RunAndReturn(run func() string) *MockEnv_GetOmsPortalApi_Call {
	_c.Call.Return(run)
	return _c
}

// GetOmsPortalApiKey provides a mock function for the type MockEnv
func (_mock *MockEnv) GetOmsPortalApiKey() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOmsPortalApiKey")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnv_GetOmsPortalApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOmsPortalApiKey'
type MockEnv_GetOmsPortalApiKey_Call struct {
	*mock.Call
}

// GetOmsPortalApiKey is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetOmsPortalApiKey() *MockEnv_GetOmsPortalApiKey_Call {
	return &MockEnv_GetOmsPortalApiKey_Call{Call: _e.mock.On("GetOmsPortalApiKey")}
}

func (_c *MockEnv_GetOmsPortalApiKey_Call) Run(run func()) *MockEnv_GetOmsPortalApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetOmsPortalApiKey_Call) Return(s string, err error) *MockEnv_GetOmsPortalApiKey_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnv_GetOmsPortalApiKey_Call) RunAndReturn(run func() (string, error)) *MockEnv_GetOmsPortalApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetOmsWorkdir provides a mock function for the type MockEnv
func (_mock *MockEnv) GetOmsWorkdir() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOmsWorkdir")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEnv_GetOmsWorkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOmsWorkdir'
type MockEnv_GetOmsWorkdir_Call struct {
	*mock.Call
}

// GetOmsWorkdir is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetOmsWorkdir() *MockEnv_GetOmsWorkdir_Call {
	return &MockEnv_GetOmsWorkdir_Call{Call: _e.mock.On("GetOmsWorkdir")}
}

func (_c *MockEnv_GetOmsWorkdir_Call) Run(run func()) *MockEnv_GetOmsWorkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetOmsWorkdir_Call) Return(s string) *MockEnv_GetOmsWorkdir_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEnv_GetOmsWorkdir_Call) RunAndReturn(run func() string) *MockEnv_GetOmsWorkdir_Call {
	_c.Call.Return(run)
	return _c
}
